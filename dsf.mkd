# dsf -- directory specific functions

# TLDR

I often have functions that pertain to a specific project, and I don't want to pollute my main `.zshrc` or `.bashrc` with these functions.  I also cannot always remember the exact names.

The `dsf` command and the helper function (`cue`) help me with that.

Running `cue` gives me a fuzzy search on various rarely used (and thus hard to remember) shell functions -- both global functions as well as functions pertaining only to the current directory and its children.  Under the covers it calls `dsf`.

----

## the `dsf` command

`dsf` merely looks in the current directory, and all the way up to `$HOME` for files called `.__`, and sources them in order.  These files are expected to contain shell functions.  After sourcing all of them it executes the arguments (arg-1 is presumably the name of a shell function to invoke).

(For security reasons, if `$PWD` is not under `$HOME`, *only* the file in `$HOME` is sourced, nothing else.  So if you're in `/tmp` it won't source `/tmp/.__` even if it is present).

So for example if you had the following in one of those `.__` files:

    ## pub FILE         # publish given file to "server"'s docroot
    pub() {
        scp $1 server:/var/www/html/$1
        ssh server chmod a+r /var/www/html/$1
    }

you'd run `pub foo.txt` to publish the file `foo.txt` to your server's docroot, and this command would only run from within this directory or its subdirectories.

## the "command not found" handler

**TIP** I also have (in zsh):

    command_not_found_handler () {
            dsf "$@"
            exit $? 2> /dev/null
    }

so I can just type these functions directly in zsh.  For bash, the function name is `command_not_found_handle` if you want to do the same thing.

## dsf's help function

Finally, it has a simple "help" capability to remind you of the functions available.  If you add comments with the following pattern:

    ## command args             # some description

then running `dsf` without any arguments will list all these lines.

Here's a selected subset of what I see (though some of them only appear in root):

    nmcli dev wifi connect hw    # homewifi; hit tab before hitting enter!
    nmcli dev wifi connect hs    # phone hostspot; hit tab before hitting enter!
    nms_detailed_report          # more than one page
    wifi 0                       # wifi off
    wifi 1                       # wifi on
    sst                          # search for "STATUS" messages in journal
    lsb [2]                      # "lsb" or "lsb 2" -- run lsblk with useful options
    fix_touchpad                 # fix random hid_multitouch issues on second laptop
    xb                           # temp browser, no URL
    xbp                          # temp browser, pick from xsel, xsel-b, corp-portal, bank
    find_country IP              # using whois.cymru.com; output contains AS number/name, BGP prefix, CC, registray, allocated date
    prefix_date filelist         # use stat -c %y to get the date and prefix it
    croc_client CODE file        # one codeword and one filename

## the `cue` command

This is front-ended by the following shell function, which helps me fuzzy search for the function I want, whose exact name I may have forgotten:

    cue () {
        c="$(dsf | fzf --no-multi -1 -q "${1:-}" | sed -e 's/ *#.*//')" 
        print -z "$c"
    }

The `print -z` makes it look as if *you* typed the resulting text -- you can simply hit enter, or edit the line before running it.  Sadly this only works in `zsh`; I'm sure there's a way to do this in bash but I have not found it yet.
